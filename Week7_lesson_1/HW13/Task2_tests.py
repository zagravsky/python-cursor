from Task2 import img_download
from unittest import main, TestCase
from unittest.mock import patch, mock_open
from io import BytesIO
from requests import get
import os

if __name__ == '__main__':
    main(verbosity=2)


class ImageDownloadTest(TestCase):
    def test_img_download_via_mocking_get(self):
        self.func_return = bytes  # variable to store the return of the tested function (it returns response.content)
        self.expected_response_content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x02X\x00\x00\x01\x90\x04\x03\x00\x00\x00\x80\x1b\x03\xab\x00\x00\x00\x1bPLTE\x00\x0c\xbb\x00\x00\x00\x00\t\x8c\x00\x07t\x00\n\xa3\x00\x04F\x00\x06]\x00\x03.\x00\x01\x17X\xc4\xc9\xc8\x00\x00\x00\tpHYs\x00\x00\x0e\xc4\x00\x00\x0e\xc4\x01\x95+\x0e\x1b\x00\x00\x07\xfdIDATx\x9c\xed\xdc\xcds\xd3F\x1c\xc6q#+\xb6\x8fU[\x1a\x1f\xe3\x06(\xc7\x1a\x1a\x86\xa3C\x0c\xcd\x11\x97\x19\xc2\x11\xf3\xdac\xdd\x16\xca\x11SR\xf8\xb3\xbb\x92,i_~VV\xd6\x06u:\xdf\xcf)\xc8+\xad\xfchw\xb5\x92,z=\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x1f\x1d\xde\xfe)\xd8\xb6\xa2\xdb\xb7g\xe1\x8a\x05\xae5\x84E\xf2]\xb0m\xed%\xc9\xd3p\xc5\x02\xd7\x1a\x02a5@X\r\x10V\x03\x84\xd5\x00a5@X\r\x10V\x03\x84\xd5\x00a5@X\r\x10V\x03\x84\xd5\x00a5@X\r\x10V\x03\xdb\xc3\x8a\x8e\xde%\xc9\xf8\x8d{oP}\xb0N\x92\xcfo\x9e\xcf\xac\x0f\xda\x87ux\xa6\xb6\xfc\xe9\x91\xbd\xe1]7\x17\xda\xd6\xb0\xee\xab\xdd\xce\xfca}\xf0\xa0\xf8 \x19?\x9e\x19\x9f\xb4\r+~\xb2\xd9\xf0\xfe\x8f\xd5\xc2a\x92\xbc7\x8b\r\x92\xe4c\xf3ZC\xd8\x16\xd6\x0fI\xe9o\xe3\x83\xfb\x89f\xfc\x8b\xfeQ\xcb\xb0\xa2U\xb5\xdd*\xadx\x9d\\5\xcbM\x92\xe4\xa0y\xad\xed,\x12\x9b\x16\xdb\x9e\xbe\xfcOm\xad\xbe\xb9\xca\xbeP<\'}\x81\xfab\xfa\x0e\xed\xcf\xca\xc5V6\xbd\xde\xba\xd8Q\xcfZC\xa8\x0b+J\xbb\xda\xe3k\xea\xb8\x1e\xa9\xbf\xc63s\xad\xf3[\xf3\xde\xfc\xde\x9dwa\xc3\xba\xa9\xfeu\xf5\x99\xaa\xea$\xed\x8d\x1f\xf5\x95>Z\x1by\xdf\xa8\xd6\x10\xea\xc2\x9aV=\xa1\xbf\xb6\xf6<)\xbb\x9e\xfaV\xe1\xc2J\x9bl\xd1\xe1\xef\x1a\x07\xc8\xea\x87\xaa\xa5\xcd\x1a\xd5\x1aBMX}\xbdZ5\x9e\x8e\xcb\x95\xa6f\xa7|\xf0W\xa3\xdd\xae+6\xd5\x0f\xd6R\x1f\xd5U:\xda\x80_\xf5\xc2/\x19V<O\xa9\x01~^\x98i\xbb\xa7\xb5|\xf5\xaf\x87\xc5:e\xc7\xb3d\xeb\xab\xb1\xffE\xb9\xb1\x86\xc5"\xa31\xa9\x7fU\xad\xc9<\xfb\xa9\x84~kXk0\xd2\xd9P\x9d\x80\xf4aJ\xed\xf9\xd7\x9b?\x07\xcey\\\xd7\xe6lxj\x8eL\xc6\xa8\xbe\xd2\x8f\xd0\xc4\xd87\xffZC\x90\xc2\xb2\x87\xd4i\xd9\x0fG\xf6\x99\xc9^\xef\xa9G\x95b\xb1\x85\x99A_?*\xc7Z?T\x07\xf2\x9b\x9dj\rA\n\xcb>Y\x0f\xcb\x9d=\xd6\x86/W\x8b\xb0\xb4\xd6\x9b[i\x99\xa8\xe4\xbe\xd5V~h\x14\xec:\xac\x955\r\x8c\xcaabZ{%\xd9"\xac\xa1\x9d\xc1D\xefz\x8b\xea\x1fS\xe7pu\x1bV\xac\x1d\xc8\xdc\xaaX\xb0\xb4\xfb\x80\xa1EX\xc7\xe5|`c\xa8/8-\xd7P\xbd\xd0l\x81]\x875pZz\xd9\xa0.-\xac\xa5}M\xd3\xd7\x0bE\xe5\xe1\x1b\xba\xebv\x1b\x96;\x8a_)\xba\xc1\xa5\x85\xe56\x18m\x86\x90\xd6\xbb\xd9\x81\xa9;u\xe96,w\x14W\xfb\x93\xff\xb1\xbc\xa41+v\xa7$\x8b\xe4\xab\xea\x1f\xa3\xcd*\xee\x08\xd1uXN\x97H;\xe6A\xf6\x87;\xbc\xeav\x0f\xcb\xed\xf9j/\xb4\xb6\x16oN\x96Cs2\xdf\xa4\xd6\x10\x84\xb0\x16N_\x8b\x8a\xfd9\xbe\xa4y\xd6\x9e\x1b\xc2\xc4\xd8\xb1e~\x94\x84^\xd8qXk\xb7\xa9\x17\x07~h\x8c$\xb6\xdd\xc3\x1a\xd9\'\xc3t\x9c\xd4\xdbw>\xb0\xc7\xd6l\xb9I\xad!\x08a\t\x974\xebMF\xfd\xa4n\xd0\xda=\xac+n\xf7\x1e\x19\x8d(\xef\x87C\xa9aw\x1aV$\xb4\x9eU\x91\xdf\xban\xcfv\x0fk\xe2v\xaf\xa1\x99_6Z\xba\xa3\xa9\x7f\xad!\x88a\xd9\x83\xad\nksjRWB\xfb\x07\xdb\xb6\xd5&,\'\x85aq\x06.Wz(\x9c3\xfdk\r\xc1\r\xab/T\xbe(\x861\x95\xa4\xf18\xc1\xb0{X\xc2e\xd4\x9e5\x8c\xa9\x99\x98|\x19\xdfiX\x83\xba\xb0\xb2\x9b\xbf\xc9\x96gU\xbb\x87%\xcc\xdf\xec\xb0&\xc9X~\xb8\xd2uXo_YV\xe5\xa4\'\xcen\xb0\x8e\xc5\xb8\xda\x84\xb5oW\xf9\xdajF\x83\xb4^\xe9T\xdcuX\x82r\x86\xb8y`5~\xe4n\xabMX\x92\x03\xa3LZ\xef\xccos\x97\xc5\rK\xb8\xb3\xad\x87\xd5\x8b\x16\xf9\x12w\xe8\xda=\xac\x85GXjB,^\x98\xfe\xa7\xc3\xea\xf5\x8e\xf2g\xd2\xe3\x17\xee\x9aO=\xaa\xdc1\xacS\xfb\xfe`\xb3ZC\x10\xc3r\xc6\xacW\xaf\x8c`\xa2\x97y\\O\x9d5\xad%"1,g\xccRfF\x99Ub\xdf}oTk\x08\xe2\x98\xb5mnP\x89\x8f\xb2\xb6u`,l3f\xd5\xdd\xfa\xc9d\x8f\xc2\x9d\t\xa0\x7f\xad!\xf8M\x1d\x04\xd9\xd0e~\xc5\xa0S\x07\xdbq2v\x9eU4\xa95\x84\x9d\xc3\xea\xc5\xe9)\xcch\x83\x97\x1a\x96\x9a\xbd8\xf7\x9e\x9b\xd4\x1a\x828\x83\x97Z\xbb+^Y\xb7\xe2\xda\xcc\xe0\x85\x8b>Cz\x08\x07\xe2D\xab\xebk\xc3\x9a\xdb0\xba\x81\xf5|:\xe8\x85\xb4Sb\x9c\xb6.\xa1\x01v\x1a\x96|\xb9\xbae\xe5]~)%\x14\xab\x7f\x1e\x99\xcan\xb2\x89\xf7\x1e\xbb\xbe\x9f\xe5\xdc\xfc\xdbbd\xf6\xd86\xf7\xb3\xc4\xc9\xb9\xbdN_:\x8e\xdd\x86\xb5\x92\'\x7f\x02\xb5\xf3\xdaS\x85\x16a\x89w\xf5t\x9b\xfb\xc9\xf6\xe3\xdf\x06\xb5\x86 >\xb0\xf0\xfe\x01\xb3\xd9\x08[=\xb0\xa8]3\xde\xdc\xea\x96\xfa\xe1\x17\x0cKHfr\xe1\x00R2\x9fmxN:\x84b\xd1\x05\xe3d\xf1l\xb5/\xdc\x84\xf7\x9d\xea\x04 \x84u\xe1\x00\xa2\xaf\x1d&\xac\x8b\xc6\xc9\xf2\xa9\xce\xc2=mv\x1bV\x83vm\xae\xdd"\xac\xfaw\x17\xaag\xab\xa7\xee\xb5X\xb7aE\xfe\xa7\xc3`-kR\xdb\x9a\xabg\xab\xc2\xbe}\xc1\xb0\xa4\xb9\xf3\xda{\x847\xc7,\xcf\xb9\xbfTlT\xfb\x8d\x97U\xe7s\xfb\xa1\xf7\x15G{\xd2\xdcy\xea=h\x99\xcfc=\xe7\xfeR\xb1~]k\xd6\x9b\x93\x9b\xaa\xff\x15Gk\xd2\xdcy\xe4;\x87\xb7Nb\x9es\x7f\xb1\xd8\xba\xe6\x14<\xd2\x06*\xe7\'\x82M\xae8\xda\x92N}\xc6o\x85\xeb\xd8\xbf\xd7\xf3\x1c\xec\xa4b\x93\x9a\xce\xb4\xd0wg\xe1\xa4\xea?\xc4\xb6%\xfc:,\xbb\xe6\xf3\x1a\x06\x96\xd6\x1cQ\xbc\xd0uI\xc5\xf6\xb6\x1f sr5r\xf6\xcd\xb3\xd6\x00\xc4\x1fk\x0f\x8d\x97g4\xa7\xc6y{`\x7f\xc1\xa5\xdftV,\xb62_G\xd0+5\xa6\x0bn?\xf4\xac5\x80X:\xa2\xe9\x9d*\xfdhE\x8bY\xfe\xc7q\xf5.J^\xca\x9cO\x1f\xfb\xb5H\xb1\xd8\xcf\xd6=\xfd\xebe\xdf\xb2.\x08\x97\xf6\xadx\xcfZCP\xdf\xf8\xf7\xfc\xaf~\xb5\x0f\xaai%\xff\x14\xffL_v\x9a\x95\xfbu~\xb0Y\x9c\xddW>\xe8\xe9\x86\xd5/!\xea\xfe\xbf7\xb9\xd8J\x7f^t\xf2\xa4\x1c\x88\xac\xd7\x0b\xdd\x9f=y\xd6\x1a\x82\xfa\xfe\xc9\xdb[\xf3\xf9\xe1k\xbd\xb1\xa7A\x8c\x1f\xa5\xaf\x85\x9d\xbc\xd4\x9en\xa6\x85\x93\xf3\xe7\xd7\xe6\xf3\xef\xb3\x07<\x1f\xccm\xc5\xe9\xe3D\xf5\xe9\xbd;\xab\xba\x07\x10r\xb1\xec\x11\xdc\xf9-U\xd3\xfc\xceYR\x8d\xda\xf6\xc5sl\xdf\xfa\xf7\xac5\x04\xed\x05B}dX\'\x86Y\xbex`.v\x06\xb6i\xf9Q\xedn\xcb\xc5n\x9aU\x16a9/g.\xed\x13\xb8g\xad!\xdc\x95\xc2\xca\xde\x9c+U\xcf\xea\x8b\xc7\xd1\x89\xf0$\xccX\xabv\xb7\xb7\x14\xbb\xabm;9\xdf\xec\x8d{\x06r\xfa\xa1g\xad!\xc4\xbf\x8a\xdf=zR\xee\xf7[\xfd\x83\x1b\xe5\x9e]5\xca\xe7\xca\x17\xa8?\xb8\x9f]\\\xecz\xb9\xed\xfdg\xc52\xe7E\xd6\xb4\xdbYs\x05\xcfZ\x83\xb8\x91\xbf\xf3n\xedS\xef\xe4\xecs\xf6\x92\xbd\xb5<><\xfb\xbcV\xcbo\x89\xdb\x8a^f\xef\xec\xcb\x1f^X,N_\xec\x1f\x7fz|\xd1\xea;\xd6\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\xfd\x0bm\x9e\xbd=\xe2`<R\x00\x00\x00\x00IEND\xaeB`\x82'
        # above is the byte representation of response.content that is expected depending on the image in our test_url.
        # current value is for the image currently set with test_url variable
        self.test_url = "https://dummyimage.com/600x400/000cbb/000000&text=test+text"
        with patch('Task2.get') as mocked_get:  # we mock get so it would use test_url instead of function's default url
            mocked_get.return_value = get(self.test_url)  #
            self.func_return = img_download()
        self.assertEqual(self.func_return, self.expected_response_content)
        os.remove("file.png")  # cleanup

    def test_img_download_via_mocking_response_content(self):
        self.expected_response_content = b'picture'
        with patch('requests.models.Response.content') as mocked_response_content:  # we mock the content() method of
            # Response class so it would return our mocked value - b'picture'
            mocked_response_content.return_value = b'picture'
        self.assertEqual(b'picture', self.expected_response_content)

